#!/bin/bash

# APK Local - Unified Alpine Package Manager for Container Environments
# Usage: 
#   apk-local manager <apk_args>    - Package management
#   apk-local env <binary> [args]   - Run binary with Alpine PATH
#   apk-local export                - Export environment variables

set -e

APK_ROOT="$PWD/.local/alpine"
APK_DB="$APK_ROOT/lib/apk/db"
APK_CACHE="$APK_ROOT/var/cache/apk"
APK_BIN="$APK_ROOT/usr/bin"
APK_STATIC="$PWD/.local/apk.static"

# Function to show usage
show_usage() {
    echo "APK Local - Unified Alpine Package Manager"
    echo ""
    echo "Usage:"
    echo "  $0 manager <apk_command> [args...]     # Package management"
    echo "  $0 env <binary> [args...]              # Run binary with Alpine PATH"
    echo "  $0 setup <channel>                     # Setup repository channel"
    echo "  $0 export                              # Export environment variables"
    echo ""
    echo "Examples:"
    echo "  $0 manager add git vim htop            # Install packages"
    echo "  $0 manager search nodejs               # Search packages"
    echo "  $0 setup edge                          # Switch to edge channel"
    echo "  $0 setup v3.19                         # Switch to v3.19 stable"
    echo "  $0 env git status                      # Run git with Alpine PATH"
    echo "  source <($0 export)                    # Load environment"
    echo ""
    echo "Package Manager Commands:"
    echo "  add <packages>     # Install packages"
    echo "  search <term>      # Search for packages"
    echo "  update            # Update package index"
    echo "  list              # List installed packages"
    echo "  del <package>     # Remove package"
    echo ""
    echo "Setup Channels:"
    echo "  edge              # Latest bleeding-edge packages"
    echo "  v3.19             # Alpine 3.19 stable"
    echo "  v3.20             # Alpine 3.20 stable"
    echo "  latest-stable     # Latest stable release"
}

# Function to detect architecture for apk.static download
detect_arch() {
    local uname_arch=$(uname -m)
    case "$uname_arch" in
        x86_64)
            echo "x86_64"
            ;;
        aarch64|arm64)
            echo "aarch64"
            ;;
        armv7l|armv6l)
            echo "armv7"
            ;;
        i386|i686)
            echo "x86"
            ;;
        *)
            echo "‚ùå Unsupported architecture: $uname_arch" >&2
            echo "Supported architectures: x86_64, aarch64, armv7, x86" >&2
            return 1
            ;;
    esac
}

# Function to download and setup APK
setup_apk() {
    # Ensure .local directory exists
    mkdir -p "$PWD/.local"
    
    # Download apk.static if needed
    if [ ! -f "$APK_STATIC" ]; then
        echo "Downloading apk.static to .local/..."
        
        # Detect architecture
        local arch=$(detect_arch)
        if [ $? -ne 0 ]; then
            echo "‚ùå Failed to detect compatible architecture"
            return 1
        fi
        
        echo "üîç Detected architecture: $arch (from uname -m: $(uname -m))"
        
        # Use system curl explicitly to avoid Alpine curl conflicts
        local download_url="https://gitlab.alpinelinux.org/api/v4/projects/5/packages/generic/v2.14.10/$arch/apk.static"
        echo "üì• Downloading from: $download_url"
        
        curl -L "$download_url" -o "$APK_STATIC" || \
        command curl -L "$download_url" -o "$APK_STATIC"
        chmod +x "$APK_STATIC"
        echo "apk.static downloaded to $APK_STATIC"
    fi

    # Set up Alpine environment only if it doesn't exist
    if [ ! -f "$APK_DB/installed" ]; then
        echo "Setting up Alpine environment in $APK_ROOT..."
        
        # Create minimal Alpine directory structure
        mkdir -p "$APK_DB" "$APK_CACHE" "$APK_ROOT/etc/apk" "$APK_BIN"

        # Create repositories file
        cat > "$APK_ROOT/etc/apk/repositories" << EOF
https://dl-cdn.alpinelinux.org/alpine/edge/main
https://dl-cdn.alpinelinux.org/alpine/edge/community
https://dl-cdn.alpinelinux.org/alpine/edge/testing
EOF

        # Create keys directory and download Alpine signing keys
        mkdir -p "$APK_ROOT/etc/apk/keys"
        curl -s https://alpinelinux.org/keys/alpine-devel%40lists.alpinelinux.org-4a6a0840.rsa.pub -o "$APK_ROOT/etc/apk/keys/alpine-devel@lists.alpinelinux.org-4a6a0840.rsa.pub" 2>/dev/null || true
        curl -s https://alpinelinux.org/keys/alpine-devel%40lists.alpinelinux.org-5243ef4b.rsa.pub -o "$APK_ROOT/etc/apk/keys/alpine-devel@lists.alpinelinux.org-5243ef4b.rsa.pub" 2>/dev/null || true
        curl -s https://alpinelinux.org/keys/alpine-devel%40lists.alpinelinux.org-5261cecb.rsa.pub -o "$APK_ROOT/etc/apk/keys/alpine-devel@lists.alpinelinux.org-5261cecb.rsa.pub" 2>/dev/null || true

        # Initialize the database and install musl for compatibility
        echo "Initializing APK database..."
        "$APK_STATIC" --root "$APK_ROOT" --initdb --allow-untrusted add
        echo "Installing musl dynamic linker for compatibility..."
        "$APK_STATIC" --root "$APK_ROOT" --cache-dir "$APK_CACHE" --allow-untrusted add musl >/dev/null 2>&1 || true
    else
        # Just ensure directories exist (in case they were partially deleted)
        mkdir -p "$APK_DB" "$APK_CACHE" "$APK_BIN"
    fi
}

# Function to handle package manager commands
manager_command() {
    if [ $# -eq 0 ]; then
        echo "Package Manager Usage:"
        echo "  $0 manager add <packages>     # Install packages"
        echo "  $0 manager search <term>      # Search for packages"
        echo "  $0 manager update            # Update package index"
        echo "  $0 manager list              # List installed packages"
        echo "  $0 manager del <package>     # Remove package"
        echo ""
        echo "Alpine packages will be installed to: $APK_ROOT"
        echo "Use '$0 export' to set up environment variables"
        return 0
    fi

    setup_apk

    # Run apk with proper root and cache directories
    echo "Running: apk --root $APK_ROOT --cache-dir $APK_CACHE --allow-untrusted $@"
    set +e  # Temporarily disable exit on error
    "$APK_STATIC" --root "$APK_ROOT" --cache-dir "$APK_CACHE" --allow-untrusted "$@"
    APK_EXIT_CODE=$?
    set -e  # Re-enable exit on error

    # Show path info for installation commands
    if [[ "$1" == "add" ]]; then
        echo ""
        echo "Alpine packages installed to: $APK_ROOT"
        echo "Binaries available in: $APK_BIN"
        echo ""
        echo "To use installed programs:"
        echo "  source <($0 export)        # Load environment"
        echo "  $0 env <binary> [args]     # Run with Alpine PATH"
    fi

    return $APK_EXIT_CODE
}

# Function to run binary with Alpine PATH
env_command() {
    if [ $# -eq 0 ]; then
        echo "Environment Usage:"
        echo "  $0 env <binary> [args...]    # Run binary with Alpine PATH"
        echo ""
        echo "Examples:"
        echo "  $0 env git status           # Run git from Alpine"
        echo "  $0 env htop                 # Run htop from Alpine"
        echo "  $0 env which git            # Check which git is used"
        return 1
    fi

    local binary="$1"
    shift

    # Check if Alpine environment exists
    if [ ! -d "$APK_BIN" ]; then
        echo "‚ùå Alpine environment not found. Install packages first:"
        echo "  $0 manager add <packages>"
        return 1
    fi

    # Add Alpine bin to PATH temporarily and run command
    export PATH="$APK_BIN:$PATH"
    
    # Check if binary exists in Alpine
    if [ -x "$APK_BIN/$binary" ]; then
        echo "üèîÔ∏è  Testing Alpine binary compatibility..."
        
        # Test if the Alpine binary can actually execute directly
        if "$APK_BIN/$binary" --version >/dev/null 2>&1 || "$APK_BIN/$binary" --help >/dev/null 2>&1 || "$APK_BIN/$binary" -h >/dev/null 2>&1; then
            echo "‚úÖ Alpine binary is compatible, using: $APK_BIN/$binary"
            exec "$binary" "$@"
        else
            echo "üîß Alpine binary needs musl dynamic linker..."
            
            # Find Alpine's dynamic linker
            local alpine_ld=""
            for ld_path in "$APK_ROOT/lib/ld-musl-"*.so.1 "$APK_ROOT/usr/lib/ld-musl-"*.so.1; do
                if [ -f "$ld_path" ]; then
                    alpine_ld="$ld_path"
                    break
                fi
            done
            
            if [ -n "$alpine_ld" ] && [ -f "$alpine_ld" ]; then
                echo "‚úÖ Using Alpine dynamic linker: $alpine_ld"
                export LD_LIBRARY_PATH="$APK_ROOT/lib:$APK_ROOT/usr/lib:${LD_LIBRARY_PATH:-}"
                exec "$alpine_ld" "$APK_BIN/$binary" "$@"
            else
                echo "‚ùå Alpine dynamic linker not found, installing musl..."
                # Install musl if not present
                "$APK_STATIC" --root "$APK_ROOT" --cache-dir "$APK_CACHE" --allow-untrusted add musl >/dev/null 2>&1 || true
                
                # Try again to find the dynamic linker
                for ld_path in "$APK_ROOT/lib/ld-musl-"*.so.1 "$APK_ROOT/usr/lib/ld-musl-"*.so.1; do
                    if [ -f "$ld_path" ]; then
                        alpine_ld="$ld_path"
                        break
                    fi
                done
                
                if [ -n "$alpine_ld" ] && [ -f "$alpine_ld" ]; then
                    echo "‚úÖ Alpine dynamic linker installed: $alpine_ld"
                    export LD_LIBRARY_PATH="$APK_ROOT/lib:$APK_ROOT/usr/lib:${LD_LIBRARY_PATH:-}"
                    exec "$alpine_ld" "$APK_BIN/$binary" "$@"
                else
                    echo "‚ùå Could not set up Alpine dynamic linker"
                    echo "üîÑ Falling back to system version..."
                    export PATH="${PATH#$APK_BIN:}"
                    if command -v "$binary" >/dev/null 2>&1; then
                        echo "üéØ Using system version: $(command -v "$binary")"
                        exec "$binary" "$@"
                    else
                        echo "‚ùå Binary '$binary' not found in system PATH either"
                        echo "üí° Consider installing '$binary' on your host system"
                        return 1
                    fi
                fi
            fi
        fi
    else
        echo "üéØ Alpine binary not found, using system version"
        if command -v "$binary" >/dev/null 2>&1; then
            echo "‚úÖ Using system version: $(command -v "$binary")"
            exec "$binary" "$@"
        else
            echo "‚ùå Binary '$binary' not found in Alpine or system PATH"
            echo "üí° Install with: $0 manager add $binary"
            return 1
        fi
    fi
}

# Function to setup repository channels
setup_command() {
    if [ $# -eq 0 ]; then
        echo "Setup Usage:"
        echo "  $0 setup <channel>                     # Setup repository channel"
        echo ""
        echo "Available channels:"
        echo "  edge              # Latest bleeding-edge packages"
        echo "  v3.19             # Alpine 3.19 stable"
        echo "  v3.20             # Alpine 3.20 stable"
        echo "  latest-stable     # Latest stable release (currently v3.20)"
        echo ""
        echo "Examples:"
        echo "  $0 setup edge                          # Switch to edge"
        echo "  $0 setup v3.19                         # Switch to v3.19"
        return 1
    fi

    local channel="$1"
    
    # Ensure APK environment exists
    setup_apk
    
    echo "üîß Setting up Alpine repositories for channel: $channel"
    
    case "$channel" in
        "edge")
            cat > "$APK_ROOT/etc/apk/repositories" << EOF
https://dl-cdn.alpinelinux.org/alpine/edge/main
https://dl-cdn.alpinelinux.org/alpine/edge/community
https://dl-cdn.alpinelinux.org/alpine/edge/testing
EOF
            echo "‚úÖ Configured edge channel (bleeding-edge packages)"
            ;;
        "v3.19")
            cat > "$APK_ROOT/etc/apk/repositories" << EOF
https://dl-cdn.alpinelinux.org/alpine/v3.19/main
https://dl-cdn.alpinelinux.org/alpine/v3.19/community
EOF
            echo "‚úÖ Configured v3.19 stable channel"
            ;;
        "v3.20"|"latest-stable")
            cat > "$APK_ROOT/etc/apk/repositories" << EOF
https://dl-cdn.alpinelinux.org/alpine/v3.20/main
https://dl-cdn.alpinelinux.org/alpine/v3.20/community
EOF
            echo "‚úÖ Configured v3.20 stable channel (latest stable)"
            ;;
        v3.*)
            # Support any v3.x version
            local version="$channel"
            cat > "$APK_ROOT/etc/apk/repositories" << EOF
https://dl-cdn.alpinelinux.org/alpine/$version/main
https://dl-cdn.alpinelinux.org/alpine/$version/community
EOF
            echo "‚úÖ Configured $version stable channel"
            ;;
        *)
            echo "‚ùå Unknown channel: $channel"
            echo ""
            echo "Available channels: edge, v3.19, v3.20, latest-stable"
            echo "Or specify any Alpine version like: v3.18, v3.17, etc."
            return 1
            ;;
    esac
    
    echo "üîÑ Updating package index..."
    "$APK_STATIC" --root "$APK_ROOT" --cache-dir "$APK_CACHE" --allow-untrusted update
    
    echo ""
    echo "üéâ Repository setup complete!"
    echo "üì¶ Current repositories:"
    cat "$APK_ROOT/etc/apk/repositories" | sed 's/^/   /'
}

# Function to export environment variables
export_command() {
    # Check if Alpine environment exists
    if [ ! -d "$APK_BIN" ]; then
        echo "# ‚ùå Alpine environment not found"
        echo "# Install packages first: $0 manager add <packages>"
        return 1
    fi

    echo "# Alpine Package Manager Environment"
    echo "# Generated by: $0 export"
    echo ""
    echo "# Add Alpine binaries to PATH"
    echo "export PATH=\"$APK_BIN:\$PATH\""
    echo ""
    echo "# APK Local environment variables"
    echo "export APK_LOCAL_ROOT=\"$APK_ROOT\""
    echo "export APK_LOCAL_BIN=\"$APK_BIN\""
    echo ""
    echo "# Helper aliases"
    echo "alias apk-manager='$PWD/$0 manager'"
    echo "alias apk-env='$PWD/$0 env'"
    echo "alias apk-which='type -a'"
    echo ""
    echo "echo '‚úÖ Alpine environment loaded'"
    echo "echo 'üèîÔ∏è  Alpine bin: $APK_BIN'"
    echo "echo 'üí° Use apk-manager, apk-env, or original commands'"
}

# Main script logic
case "${1:-}" in
    "manager")
        shift
        manager_command "$@"
        ;;
    "env")
        shift
        env_command "$@"
        ;;
    "setup")
        shift
        setup_command "$@"
        ;;
    "export")
        export_command
        ;;
    "help"|"-h"|"--help")
        show_usage
        ;;
    "")
        show_usage
        ;;
    *)
        echo "‚ùå Unknown command: $1"
        echo ""
        show_usage
        exit 1
        ;;
esac 